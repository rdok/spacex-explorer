pipeline {
    agent { label "linux" }
    options { buildDiscarder( logRotator( numToKeepStr: '20' ) ) }
    triggers { githubPush() }
    parameters {
        string(
            name: 'PROJECT_NAME',
            defaultValue: "${env.BUILD_TAG}",
            description: 'For docker-compose.'
        )
    }
    stages {
        stage('Build & Start') {
            steps {
                githubNotify account: 'rdok',
                    context: 'Status Check',
                    credentialsId: 'status-check-github-token',
                    description: 'Jenkins',
                    repo: 'spacex-explorer',
                    sha: "${env.GIT_COMMIT}",
                    status: 'PENDING'

                sh"""#!/bin/bash -xe
                    cp .env.testing .env
                    docker-compose \
                        --project-directory . \
                        --project-name "${env.PROJECT_NAME}" \
                        --file docker/docker-compose.yml \
                        up -d db
                    docker-compose \
                        --project-directory . \
                        --project-name "${env.PROJECT_NAME}" \
                        --file docker/docker-compose.yml \
                        build php

                    docker-compose \
                        --project-directory . \
                        --project-name "${env.PROJECT_NAME}" \
                        --file docker/docker-compose.yml \
                        run -v "${env.WORKSPACE}":/var/www -w /var/www php \
                        composer install

                    docker-compose \
                        --project-directory . \
                        --project-name "${env.PROJECT_NAME}" \
                        --file docker/docker-compose.yml \
                        run -v "${env.WORKSPACE}":/var/www -w /var/www php \
                        php artisan migrate --env=testing
                """
            }
        }

        stage('Test') {
            steps {
                sh"""#!/bin/bash -xe
                    docker-compose \
                        --project-directory . \
                        --project-name "${env.PROJECT_NAME}" \
                        --file docker/docker-compose.yml \
                        run -v "${env.WORKSPACE}":/var/www -w /var/www \
                        php ./vendor/bin/phpunit
                """
            }
        }
    }

    post {
        failure {
            githubNotify account: 'rdok',
               context: 'Status Check',
               credentialsId: 'status-check-github-token',
               description: 'Jenkins',
               repo: 'spacex-explorer',
               sha: "${env.GIT_COMMIT}",
               status: 'FAILURE'
        }
        success {
            githubNotify account: 'rdok',
               context: 'Status Check',
               credentialsId: 'status-check-github-token',
               description: 'Jenkins',
               repo: 'spacex-explorer',
               sha: "${env.GIT_COMMIT}",
               status: 'SUCCESS'
        }
        always {
            sh"""#!/bin/bash -xe
                docker-compose \
                    --project-directory . \
                    --project-name "${env.PROJECT_NAME}" \
                    --file docker/docker-compose.yml \
                    down -v --remove-orphans
            """
        }
    }
}
